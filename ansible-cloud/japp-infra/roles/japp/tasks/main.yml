---
- name: Import VPC Output Variables
  include_vars: vars/output_vars.yml

- name: Import VPC Variables
  include_vars: vars/vpc_vars.yml

- name: Import Stack Variables
  include_vars: vars/stack_vars.yml

- name: Create japp EC2 key
  amazon.aws.ec2_key:
    name: japp-key
    region: "{{region}}"
  register: jappkey_out

- debug:
    var: jappkey_out

- name: Save private key in a file japp.pem
  copy:
    content: "{{jappkey_out.key.private_key}}"
    dest: ./bation-key.pem
    mode: 0600
  when: jappkey_out.changed

- name: Create Security Group for Load Balancer
  amazon.aws.ec2_security_group:
    name: "jappELBSG"
    description: Allows port 80 from everywhere and all port within sg
    region: "{{region}}"
    vpc_id: "{{vpcid}}"
    rules:
      - proto: tcp
        ports:
          - 80
        cidr_ip: 0.0.0.0/0
        rule_desc: allow port 80 from everywhere
    register: jappELBSG_out

- name: Create Security Group for japp stack
  amazon.aws.ec2_security_group:
    name: jappStackSG
    description: Allows port 22 from everywhere and all port within sg
    region: "{{region}}"
    vpc_id: "{{vpcid}}"
    purge_rules: false
    rules:
      - proto: tcp
        from_port: 80
        to_port: 80
        group_id: "{{jappELBSG_out.group_id}}"

      - proto: tcp
        from_port: 22
        to_port: 22
        group_id: "{{bastionSGid}}"
    register: jappStackSG_out

- name: Update Security Group with its own sd id
  amazon.aws.ec2_security_group:
    name: jappStackSG
    description: Allows port 22 from everywhere and all port within sg
    region: "{{region}}"
    vpc_id: "{{vpcid}}"
    purge_rules: false
    rules:
      - proto: all
        group_id: "{{jappStackSG_out.group_id}}"

- name: Create Nginx web01
  amazon.aws.ec2_instance:
    name: "Japp-Web01"
    vpc_subnet_id: "{{privsub1id}}"
    instance_type: t2.micro
    security_group: "{{jappStackSG_out.group_id}}"
    network_interfaces:
      - assign_public_ip: true
    image_id: "{{nginx_ami}}"
    wait: true
    wait_timeout: 400
    tags:
      ManagedBy: Ansible
      Owner: DevOp
    exact_count: 1
  register: web01_out

- name: Create Tomcat app01
  amazon.aws.ec2_instance:
    name: "Japp-App01"
    vpc_subnet_id: "{{privsub1id}}"
    instance_type: t2.micro
    security_group: "{{jappStackSG_out.group_id}}"
    network_interfaces:
      - assign_public_ip: true
    image_id: "{{tomcat_ami}}"
    wait: true
    wait_timeout: 400
    tags:
      ManagedBy: Ansible
      Owner: DevOp
    exact_count: 1
  register: app01_out

- name: Create Memcache mc01
  amazon.aws.ec2_instance:
    name: "Japp-mc01"
    vpc_subnet_id: "{{privsub1id}}"
    instance_type: t2.micro
    security_group: "{{jappStackSG_out.group_id}}"
    network_interfaces:
      - assign_public_ip: true
    image_id: "{{memcache_ami}}"
    wait: true
    wait_timeout: 400
    tags:
      ManagedBy: Ansible
      Owner: DevOp
    exact_count: 1
  register: mc01_out

- name: Create RabbitMq rmq01
  amazon.aws.ec2_instance:
    name: "Japp-Rmq01"
    vpc_subnet_id: "{{privsub1id}}"
    instance_type: t2.micro
    security_group: "{{jappStackSG_out.group_id}}"
    network_interfaces:
      - assign_public_ip: true
    image_id: "{{rmq_ami}}"
    wait: true
    wait_timeout: 400
    tags:
      ManagedBy: Ansible
      Owner: DevOp
    exact_count: 1
  register: rmq01_out

- name: Create MySQl db01
  amazon.aws.ec2_instance:
    name: "Japp-db01"
    vpc_subnet_id: "{{privsub1id}}"
    instance_type: t2.micro
    security_group: "{{jappStackSG_out.group_id}}"
    network_interfaces:
      - assign_public_ip: true
    image_id: "{{mysql_ami}}"
    wait: true
    wait_timeout: 400
    tags:
      ManagedBy: Ansible
      Owner: DevOp
    exact_count: 1
  register: db01_out

- debug:
    var: db01_out.tagged_instances[0].id

- amazon.aws.elb_application_lb:
    name: "japp-elb"
    security_groups:
      - "{{jappELBSG_out.group_id}}"
    subnets:
      - "{{ pubsub1id }}"
      - "{{ pubsub2id }}"
      - "{{ pubsub3id }}"
    # purge_instance_ids: true
    listeners:
      - Protocol: HTTP 
        Port: 80 
    state: present

- name: Insert/Update Hosts IP & Name in file provision-stack/group_vars/hostsip.yml
  blockinfile:
    path: provision-stack/group_vars/hostsip.yml
    block: |
      web01_ip: "{{web01_out.tagged_instances[0].private_ip}}"
      app01_ip: "{{app01_out.tagged_instances[0].private_ip}}"
      rmq01_ip: "{{rmq01_out.tagged_instances[0].private_ip}}"
      mc01_ip: "{{mc01_out.tagged_instances[0].private_ip}}"
      db01_ip: "{{db01_out.tagged_instances[0].private_ip}}"

- name: Copy login key to provision-stack directory
  copy: 
    src: japp-key.pem
    dest: provision-stack/japp-key.pem
    mode: "0400"

- name: Insert/Update Hosts IP & Name in file provision-stack/group_vars/hostsip.yml
  blockinfile:
    path: provision-stack/group_vars/hostsip.yml
    block: |
      web01_ip: "{{web01_out.tagged_instances[0].private_ip}}"
      app01_ip: "{{app01_out.tagged_instances[0].private_ip}}"
      rmq01_ip: "{{rmq01_out.tagged_instances[0].private_ip}}"
      mc01_ip: "{{mc01_out.tagged_instances[0].private_ip}}"
      db01_ip: "{{db01_out.tagged_instances[0].private_ip}}"

      [websrvgrp]
      web01